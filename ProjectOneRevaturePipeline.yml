# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

#trigger:
#- main

# this pipeline will only trigger when any change on the path SosorbaramBayaraaRevature1/ProjectOne
# A Pull Request Trigger will start a build when a PR is made to the specified branch. You can also specify ‘none’,
# which will disable PR triggers.
pr: none
trigger:
  branches:
   include:
     - main
  paths:
    include:
      - SosorbaramBayaraaRevature1/ProjectOne

pool:
  vmImage: 'windows-latest' #agent virtual machine
#DRY! - any value you use more than once should be a variable
# the path
variables:
  solution: 'SosorbaramBayaraaRevature1/ProjectOne/*.sln' # telling yaml where to look for sln file
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  workingDirectory: SosorbaramBayaraaRevature1/ProjectOne

#stages run sequentially
stages:
- stage: prep
  jobs:
  - job: sdk_and_nuget_download # can't have a space here 
    displayName: download the most current SDK
    steps:
  
    - task: UseDotNet@2
      displayName: get_the_sdk
      inputs:
        packageType: 'sdk'
        version: '6.x'
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec:
        checkLatest: true
      
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'RevatureP1Pipe'
        organization: 'sosorbaram048'
        scannerMode: 'MSBuild'
        projectKey: 'sosorbaram048_PorjectOnePipelineRevatureAccount'
        projectName: 'PorjectOnePipelineRevatureAccount'

# build stage
- stage: build
  dependsOn: prep
#jobs run in parallel
  jobs:
    - job: job1
      steps:
      - task: UseDotNet@2
        inputs:
          version: '5.0.x'
          includePreviewVersions: true # Required for preview versions

      - task: UseDotNet@2
        inputs:
          version: '3.0.x'
          packageType: runtime
      - task: NuGetCommand@2
        displayName: restore_the_app
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
      - task: DotNetCoreCLI@2
        displayName: buil_the_app 
        inputs:
          command: 'build'
          projects: '$(solution)' # making variable 
          arguments: '--configuration $(buildConfiguration)'
          workingDirectory: '$(workingDirectory)'

     # - task: VSBuild@1
     #   inputs:
     #     solution: '$(solution)'
     #     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
     #     platform: '$(buildPlatform)'
     #     configuration: '$(buildConfiguration)'

# testing tasks go here
- stage: test
  dependsOn: build
  jobs:
  - job: test_the_app
    steps: 
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        testRunTitle: 'Dotnet testing in progress'
        workingDirectory: '$(workingDirectory)'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '**/cobertura/coverage.xml' # this will grab the yaml file and send it to sonarcloud
 #       failIfCoverageEmpty: true
    - task: SonarCloudAnalyze@1
      
# publish the app
# - stage: publish
#   dependsOn: test
#   jobs:
#   - job: publish_the_app
#     steps:
# publishing is optional but allows you to decorate the PRs later
- stage: publish
  dependsOn: test
  jobs:
    - job: publish_the_app
      steps:   
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
      - task: DotNetCoreCLI@2
        displayName: publishing_task
        inputs:
          command: 'publish'
          publishWebProjects: true
          workingDirectory: '$(workingDirectory)'
          projects: $(solution)
          zipAfterPublish: true

       # - stage: deploy
#   jobs:
#   - job: deploy_the_app
#     steps:
#     - task: AzureRmWebAppDeployment@4
#       inputs:
#         ConnectionType: 'AzureRM'
#         appType: 'webApp'
#         WebAppName: 'placeholder'
#         deployToSlotOrASE: true
#         ResourceGroupName: 'placeholder'
#         SlotName: 'production'
#         packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

      #- task: VSTest@2
      #  inputs:
      #    platform: '$(buildPlatform)'
      #    configuration: '$(buildConfiguration)'

